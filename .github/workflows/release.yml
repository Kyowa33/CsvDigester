name: ðŸš€ Release App

on:
  release:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: ðŸ”¹ Checkout code
        uses: actions/checkout@v4

      - name: ðŸ”¹ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: ðŸ”¹ Install dependencies
        run: npm install

      - name: ðŸ”¹ Build app (Vite + TypeScript)
        run: npm run build

      - name: ðŸ”¹ Package with Electron Builder
        run: npx electron-builder --config
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Utile si tu signes pour macOS
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: ðŸ”¹ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifact-${{ matrix.os }}
          path: dist-electron/**
          retention-days: 7
          if-no-files-found: error

  # Ã‰tape finale : Attacher les artefacts Ã  la release
  upload-release:
    name: ðŸ“Ž Upload to Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ”¹ Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-electron
          merge-multiple: true

      - name: ðŸ”¹ List files
        run: ls -la dist-electron/

      - name: ðŸ”¹ Create Release (if not exists)
        id: create_release
        uses: actions/create-release@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.event.release.tag_name }}
          release_name: Release ${{ github.event.release.tag_name }}
          draft: false
          prerelease: false

      - name: ðŸ”¹ Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url || github.event.release.upload_url }}
          asset_path: dist-electron/CsvDigester-*.exe
          asset_name: CsvDigester-${{ github.event.release.tag_name }}-win.exe
          asset_content_type: application/vnd.microsoft.portable-executable
        if: steps.create_release.outputs.upload_url != '' || contains(github.event_name, 'release')

      - name: ðŸ”¹ Upload Release Assets (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url || github.event.release.upload_url }}
          asset_path: dist-electron/CsvDigester-*.dmg
          asset_name: CsvDigester-${{ github.event.release.tag_name }}-mac.dmg
          asset_content_type: application/x-apple-diskimage

      - name: ðŸ”¹ Upload Release Assets (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url || github.event.release.upload_url }}
          asset_path: dist-electron/CsvDigester-*.AppImage
          asset_name: CsvDigester-${{ github.event.release.tag_name }}-linux.AppImage
          asset_content_type: application/octet-stream
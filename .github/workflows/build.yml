name: Build Electron App

on:
  push:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build app
        run: npm run build

      - name: Package with Electron Builder
        run: npx electron-builder --config
        env:
          # Si tu veux signer macOS
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist-electron/**

      - name: Create Release
        if: github.event_name == 'release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.release.tag_name }}
          release_name: Release ${{ github.event.release.tag_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Windows)
        if: github.event_name == 'release' && matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist-electron/*.exe
          asset_name: CsvDigester-$(date +%Y%m%d)-win.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Release Asset (macOS)
        if: github.event_name == 'release' && matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist-electron/*.dmg
          asset_name: CsvDigester-$(date +%Y%m%d)-mac.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload Release Asset (Linux)
        if: github.event_name == 'release' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist-electron/*.AppImage
          asset_name: CsvDigester-$(date +%Y%m%d)-linux.AppImage
          asset_content_type: application/octet-stream
